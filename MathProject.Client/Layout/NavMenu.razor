@using MathProject.Client.DTOS.DirectionOfTraining
@using MathProject.Client.DTOS.TrainingCategory
@using MathProject.Client.Enums.SubjectEnumeration
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<MudNavMenu>
    <MudListItem T="string" Text="Главная" @onclick="NavToHomePage"></MudListItem>

    @if (_trainingCategories != null)
    {
        foreach (var trainingCategory in _trainingCategories)
        {
            <MudListItem T="string" Text="@trainingCategory.Name">
                <NestedList>
                    @if (_directionOfTrainings != null)
                    {
                        var filtered = _directionOfTrainings
                            .Where(dot => dot.TrainingCategoryId == trainingCategory.Id)
                            .ToList();

                        if (filtered.Count > 0)
                        {
                            @foreach (var directionOfTraining in filtered)
                            {
                                <MudListItem T="string">@directionOfTraining.Name</MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem T="string" Disabled="true">Скоро появятся</MudListItem>
                        }
                    }
                    else
                    {
                        <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true"/>
                    }
                </NestedList>
            </MudListItem>
        }
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    }

</MudNavMenu>

@code
{
    //Для работы локального хранилища
    [Inject] IJSRuntime JSRuntime { get; set; }
    private Guid _selectedSubjectId;
    private ClientTrainingCategoryFromSubjectIdDTO[]? _trainingCategories;
    private ClientDirectionOfTrainingFromSubjectIdDTO[]? _directionOfTrainings;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetSelectedSubjectId();
        
        _trainingCategories = await HttpClient
            .GetFromJsonAsync<ClientTrainingCategoryFromSubjectIdDTO[]?>
                ($"Subject/get-training-categories/{_selectedSubjectId}");
        _directionOfTrainings = await HttpClient
            .GetFromJsonAsync<ClientDirectionOfTrainingFromSubjectIdDTO[]?>
                ($"DirectionOfTraining/get-direction-of-training-from-subject-id/{_selectedSubjectId}");
    }
    
    private async Task GetSelectedSubjectId()
    {
        var storageSubjIdRes = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "curSubjId");

        if (Guid.TryParse(storageSubjIdRes, out var selSubjId))
        {
            _selectedSubjectId = selSubjId;
        }
        else
        {
            _selectedSubjectId = ClientSubjectEnumeration.Math.Id;
        }
    }

    private void NavToHomePage()
    {
        NavManager.NavigateTo("/");
    }
}
