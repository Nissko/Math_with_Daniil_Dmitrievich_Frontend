@page "/select-task/{directionOfTrainingId:guid}"
@using MathProject.Client.DTOS.DirectionOfTraining
@using MathProject.Client.DTOS.LearningTopic
@using MathProject.Client.DTOS.SubthemesOfLearning
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<PageTitle>@_directionOfTrainingDTO?.Name | @_pageTitleText</PageTitle>

@*Темы обучения*@
<MudSelect T="string"
           TValue="string"
           Value="@_selectedTask"
           ValueChanged="OnSelectedTaskChanged"
           Label="Задание"
           FullWidth="true"
           Variant="Variant.Outlined"
           Dense="true"
           Margin="Margin.Dense"
           Placeholder="Выберите задание"
           Disabled="_isSuccessGetLearningTopics">

    @if (_learningTopicDTO != null)
    {
        @foreach (var task in _learningTopicDTO)
        {
            <MudSelectItem Value="@task.Id.ToString()">@task.Number. @task.Name</MudSelectItem>
        }
    }
</MudSelect>

@*Подтемы обучения*@
<MudSelect @bind-Value="_selectedTheme"
           Label="Тема"
           FullWidth="true"
           Variant="Variant.Outlined"
           Dense="true"
           Margin="Margin.Dense"
           Placeholder="Выберите тему"
           Disabled="_isSuccessGetSubthemesOfLearning"
           HelperText="@(string.IsNullOrEmpty(_selectedTask) ? "Сначала выберите задание" : "")"
           Clearable
           TItem="string" TValue="string" @onchange="OnSelectedThemeChanged">
    @if (_subthemesOfLearningDTO != null)
    {
        foreach (var subtheme in _subthemesOfLearningDTO)
        {
            <MudSelectItem Value="@subtheme.Id.ToString()">@subtheme.Name</MudSelectItem>
        }
    }
</MudSelect>

@*Ошибка при отсутствии записей из БД*@
@if (_learningTopicDTO != null && !_learningTopicDTO.Any() && !_isShowSnackBar)
{
    _isShowSnackBar = true;
    Snackbar.Add("Не удалось загрузить данные. Попробуйте позднее.", Severity.Warning);
}

@if (!string.IsNullOrEmpty(_selectedTask) && !string.IsNullOrEmpty(_selectedTheme)
                                          && _selectedTask != "null" && _selectedTheme != "null")
{
    <div>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary"
                   Class="mt-4"
                   @onclick="LoadTask">
            Загрузить задания
        </MudButton>
    </div>
}

@code {
    //ID выбранного направление обучения
    [Parameter]
    public Guid DirectionOfTrainingId { get; set; }
    
    //Название страницы
    private string _pageTitleText = "Выбор задания";
    //Выбранное задание
    private string _selectedTask = string.Empty;
    //Выбранная тема
    private string _selectedTheme = string.Empty;
    //признак, показывалась ли ошибка(Warning)
    private bool _isShowSnackBar = false;
    
    /// <summary>
    /// Выбранное направление обучения
    /// </summary>
    private ClientDirectionOfTrainingFromSubjectIdDTO? _directionOfTrainingDTO;
    /// <summary>
    /// Темы обучения
    /// </summary>
    private ClientLearningTopicTaskSelectDTO[]? _learningTopicDTO;
    /// <summary>
    /// Подтемы обучения
    /// </summary>
    private ClientSubthemesOfLearningTaskSelectDTO[]? _subthemesOfLearningDTO;

    /// <summary>
    /// Параметр, отвечающий за Disable Select(Theme)
    /// </summary>
    private bool _isSuccessGetLearningTopics = true;
    /// <summary>
    /// Параметр, отвечающий за Disable Select(Subtheme)
    /// </summary>
    private bool _isSuccessGetSubthemesOfLearning = true;

    protected override async Task OnParametersSetAsync()
    {
        _selectedTask = string.Empty;
        _selectedTheme = string.Empty;
        _isSuccessGetSubthemesOfLearning = true;
        
        _directionOfTrainingDTO = await HttpClient
            .GetFromJsonAsync<ClientDirectionOfTrainingFromSubjectIdDTO?>
                ($"DirectionOfTraining/{DirectionOfTrainingId}");

        _isSuccessGetLearningTopics = await GetLearningTopicsAsync();
        _isShowSnackBar = false;
    }

    /// <summary>
    /// Получает данные для ДТО и регулирует работу Select(-a)
    /// </summary>
    /// <returns>true/false для select disable параметра</returns>
    private async Task<bool> GetLearningTopicsAsync()
    {
        _learningTopicDTO = await HttpClient
            .GetFromJsonAsync<ClientLearningTopicTaskSelectDTO[]?>
                ($"LearningTopics/get-learning-topics-from-dot/{DirectionOfTrainingId}");

        return !(_learningTopicDTO != null && _learningTopicDTO.Any());
    }

    /// <summary>
    /// Функция при изменении селекта "Задание"
    /// </summary>
    private async Task OnSelectedTaskChanged(string newTaskValue)
    { 
        _selectedTheme = string.Empty;
        _isShowSnackBar = false;
        _selectedTask = newTaskValue;
        
        if (!string.IsNullOrEmpty(_selectedTask))
        {
            _isSuccessGetSubthemesOfLearning = await GetSubThemesOfLearningAsync(_selectedTask);
        }
    }

    private void OnSelectedThemeChanged(ChangeEventArgs e)
    {
        _selectedTheme = e.Value?.ToString();
    }
    
    /// <summary>
    /// Подгрузка тем, после выбора номера задания
    /// </summary>
    private async Task<bool> GetSubThemesOfLearningAsync(string selectedTask)
    {
        var learningTopicId = Guid.Parse(selectedTask);

        _subthemesOfLearningDTO = await HttpClient
            .GetFromJsonAsync<ClientSubthemesOfLearningTaskSelectDTO[]?>
                ($"LearningTopics/get-subtheme-of-learnings/{learningTopicId}");

        if (_subthemesOfLearningDTO != null && !_subthemesOfLearningDTO.Any() && !_isShowSnackBar)
        {
            _isShowSnackBar = true;
            Snackbar.Add("Не удалось загрузить \"Темы\". Попробуйте позднее.", Severity.Warning);
        }
        
        return !(_subthemesOfLearningDTO != null && _subthemesOfLearningDTO.Any());
    }

    private void LoadTask()
    {
        // Здесь можно реализовать логику перехода на другую страницу
        // или загрузки контента через API или локальные данные
        //NavigationManager.NavigateTo($"/task/{_selectedTask}/{_selectedTheme}");
    }
}